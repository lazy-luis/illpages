// uic.js
/***

 Finds the element given and switches to the css class given as the opposite.


*/
var submitFormOnDateSelect = false;

var actionFieldName;

var actionFieldValue;

function showOrHide(nodeName, shownClass, hiddenClass)
{
	var childDiv = document.getElementById(nodeName);
	if (childDiv)
	{
		if (childDiv.className == shownClass)
		{
			childDiv.className = hiddenClass;
		}
		else
		{
			childDiv.className = shownClass;
		}
	}
}

function submitEnter(e, formName, url, actionValue) {
    var keycode;
    
    if (window.event) 
    	keycode = window.event.keyCode; 
    else if (e) 
    	keycode = e.which;
    else 
    	return;

    if (keycode == 13) {
    	setSubmit(formName, url, actionValue);
        return;
    }
}

function setSubmit(formName, url, actionValue) {
	document.forms[formName].action=url + '?' + '<csrf:csrfToken/>&' + 'action=' + actionValue;
	document.forms[formName].submit();
}

function textCounter(field, cntfield, maxlimit) {
    if (document.getElementById(field).value.length > maxlimit) {
        // if too long...trim it!
        document.getElementById(field).value = document.getElementById(field).value.substring(0, maxlimit);
    }
    // otherwise, update 'characters left' counter
    else { 
       var charCount = document.getElementById(cntfield);       
       if (charCount) charCount.innerHTML = maxlimit - document.getElementById(field).value.length;
    }
    return true;
}

function textCounterWithoutTrim(field, cntfield, maxlimit) {
    var charCount = document.getElementById(cntfield);       
    if (charCount) charCount.innerHTML = maxlimit - document.getElementById(field).value.length;
    return true;
}

function showStatus(msg)
{
 	window.status = msg; 
 	return true;
}

function setSubmitFormOnDateSelect(submitForm, actionIdentifier, actionValue) {
	submitFormOnDateSelect = submitForm;
	actionFieldName = actionIdentifier;
	actionFieldValue = actionValue;
}

function onCalendarDaySelect(year, month, day, formName,fieldId, parsedValue,countValue)
{ 
   var element = document.getElementsByName(fieldId);
   //var element = eval("document."+formName+"."+fieldId);
   if(isArray(element))
      element[countValue].value=parsedValue;
  else element.value=parsedValue;
  
  if (submitFormOnDateSelect) {
	eval("document."+formName + "." + actionFieldName).value = actionFieldValue;
	eval("document."+formName).submit();
  }
}

function isArray(obj)
{
	return(typeof(obj.length)=="undefined")?false:true;
}

function openCalendarWindow(formName, fieldId, dateFormat, countValue)
 {var toOpen = "jsp/tool/calendar/calendar.jsp?formName="+formName+"&fieldName="+fieldId+"&dateFormat="+dateFormat
    + "&countValue="+countValue;
  
  //2007-07-18 - KLL modify to accomodate for compound command fields 
  //var form = eval("document."+formName);
  var form = document.getElementsByName(formName);
  if(form) //form exists
   {
   	//var element = eval("document."+formName+"['"+fieldId+"']");
	// zz change for 132597
	var element = document.getElementsByName(fieldId);  
    var value = (!isArray(element)) ? element.value:
                               element[countValue].value;

    if (value.length>0) {
      try {    
        var date = new Date(value);
        if (!isNaN(date)) {
	      var year = date.getFullYear();
	      if(year<=100)
	           year+=2000;
	      toOpen+="&year="+year+"&month="+date.getMonth()+"&day="+1;
	    }
     } catch(e) { //bad date ignore      
     }    
    }   
   } else {
     alert("An error has occured configuring the date option.  Please report this problem"+
     " with this page and field");
     return;    
    } 
	var w = window.open(toOpen, "Calendar", "left=400,resizable=no,height=245,width=240,scrollbars=no,titlebar=no");
    w.focus(); 
 }
 
	 function showHelp(strBaseUrl, mapId, contentId, helpWindow, relativeUrl){
	    if (strBaseUrl.indexOf('http') == 0 || strBaseUrl.indexOf('HTTP') == 0 ) {
	    	var location = window.location.href;
	    	if (location.indexOf('https') == 0 || location.indexOf('HTTPS') == 0) {
		    	strBaseUrl = 'HTTPS' + strBaseUrl.substr(4);
		    }
	    }

	    //RH_ShowHelp(0, "/uiConnect/jsp/help/context-WebHelp/SampleHtml.htm", HH_HELP_CONTEXT, mapId);
	    var strWnd = "";
	    var strServerName = "";
	    
	    if (!mapId) {
		    mapId = 0;
		}

	    if(helpWindow == 'DEFAULT')
	    {
	       strWnd = 'Field Level Help';
	    }
	    else
	    {
	       strWnd = 'Page Level Help';
	    }
		RH_ShowWebHelp(0, strBaseUrl + relativeUrl, strWnd, HH_HELP_CONTEXT, mapId); 
	 }
 
 function ismaxlength(obj)

      {

            var mlength=obj.getAttribute? parseInt(obj.getAttribute("maxlength")) : ""

            if (obj.getAttribute && obj.value.length>mlength)

                  obj.value=obj.value.substring(0,mlength)

      }
      
function replaceAll(str, from, to) {
    var idx = str.indexOf(from);

    while (idx > -1) {
        str = str.replace(from, to); 
        idx = str.indexOf(from);
    }

    return str;
}

function isVisible(obj)
{
    if (obj == document) return true
    
    if (!obj) return false
    if (!obj.parentNode) return false
    if (obj.style) {
        if (obj.style.display == 'none') return false
        if (obj.style.visibility == 'hidden') return false
    }
    
    //Try the computed style in a standard way
    if (window.getComputedStyle) {
        var style = window.getComputedStyle(obj, "")
        if (style.display == 'none') return false
        if (style.visibility == 'hidden') return false
    }
    
    //Or get the computed style using IE's silly proprietary way
    var style = obj.currentStyle
    if (style) {
        if (style['display'] == 'none') return false
        if (style['visibility'] == 'hidden') return false
    }
    
    return isVisible(obj.parentNode)
}

function putFocus() 
{
  if ((document.forms.length > 0) && (typeof bypassFocus == "undefined")) 
  {
      var theForm;
  	  for (i=0;i<document.forms.length;i++) 
      {
	  	if(document.claimHeaderForm == document.forms[i] || document.weeklyClaim == document.forms[i] || document.duaWeeklyClaimDetails == document.forms[i] ||
	  		document.sendNoticeForm == document.forms[i] || document.weeklyClaimDetails == document.forms[i])
		{
			continue;
		}
		theForm = document.forms[i];
	  }
      if (theForm) 
      { 
	      var focusElement;
	      for(var j=0;j<theForm.elements.length;j++)
	  	  {
				var element = theForm.elements[j];
				if(!element.disabled && (element.type=="text" || element.type=="select-one") && isVisible(element))
	  			{
	  				focusElement = element;
	      			break;
	  			}
	  	  }
	  	  if (focusElement) {
		      focusElement.focus();
	      }
      }
    }
 }
 
function showWiSearch(url) {
	window.location = url;
}
 function gotoUrl(loc){
  document.location.href=loc;
  return;
}
/*function goto(loc){
  document.location.href=loc;
}*/

function hideSection(divid){
	//DOM 
	if(document.getElementById){
		document.getElementById(divid).style.display="none";
	//IE 5
	}else if (document.all){
		document.all[divid].style.display="none";
 	}
}

function showSection(divid){
	//DOM
	if(document.getElementById){
		document.getElementById(divid).style.display="block";
	//IE 5
	}else if (document.all){
		document.all[divid].style.display="block";
 	}
}



/*
********************************************************************************************
Start of popup.js for common popup
********************************************************************************************
*/



child=null;
function searchUser(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "searchUser", windowprops);
}

function form_search(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "form_search", windowprops);

}

function printImage(f)
{ 
windowprops = "top=50,left=100,resizable=yes,scrollbars=yes,width=800,height=600,statusbar=no, menubar=no, titlebar=no";
child=window.open("IWFPrintImage.htm?dummy=.pdf","printImage", windowprops); 

}
function printImage2(f)
  {
 windowprops = "top=50,left=100,resizable=yes,scrollbars=yes,width=800,height=600,statusbar=no, menubar=no, titlebar=no";
child=window.open("IWFLabelOptionChoice.htm?option=labelPrintImage&dummy=.pdf","printImage2", windowprops);
 
}
function openImage(f,v)
{
windowprops = "top=50,left=100,resizable=yes,scrollbars=yes,width=800,height=600,statusbar=no, menubar=no, titlebar=no";
window.open("IWFViewImage.htm?dummy=.pdf&guid="+v,"openImage", windowprops);

}
function openImageProperty(f,v)
{
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
child=window.open("IWFImageProperty.htm?guid="+v,"ImageProperty", windowprops);

}

function user_search(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "user_search", windowprops);

}

function reassign(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "reassign", windowprops);
}

function employer(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "employer", windowprops);

}

function printVoucher(url)
{
windowprops = "top=50,left=100,resizable=yes,scrollbars=no,width=800,height=600,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "printVoucher", windowprops);

}

function doc_ssn(url){

// Determine the popup window properties
// options include:  top, left, toolbars, scrollbars,
// menubar, location, statusbar, and resizable
var SSN=document.forms[0].ssn.value;
var ean=document.forms[0].employerAccountNumber.value;
var fein=document.forms[0].fein.value;
var formType=document.forms[0].formType.value;
URL=url+"?ssn="+SSN+"&formType="+formType+"&fein="+fein+"&employerAccountNumber="+ean;
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
window.open(URL, "doc_ssn", windowprops);

}

function rel_item(url){
var SSN=document.forms[0].ssn.value;
URL=url+"?ssn="+SSN;
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
window.open(URL, "rel_item", windowprops);

}

function penal_prop(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=150,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "penal_prop", windowprops);

}
function penalty(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "penalty", windowprops);

}

function openPreviewDetermination()
{

windowprops = "top=150,left=150,resizable=no,scrollbars=yes,width=800,height=600,statusbar=no, menubar=no, titlebar=no, resizable=no";
child=window.open("IWFPreviewDeterminationPDF.htm?option=preview&div=resolution","PreviewDeter", windowprops); 
 
}

function openLockedMessage(userName)
{
windowprops="top=150,left=150,resizable=no,scrollbars=no,width=700,height=146,statusbar=no, menubar=no, titlebar=no";
var URL="IWFLockedMessage.htm?page=WorkflowSearchResults&userName="+userName;
child=window.open(URL,"WorItemLocked",windowprops);

}
function saveInbox(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=146,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "saveInbox", windowprops);

}
function cancelConfirm(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=146,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "cancelConfirm", windowprops);

}
function sendNoticeThunder(url){
windowprops = "top=150,left=150,resizable=yes,scrollbars=yes,width=700,height=800,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "sendNoticeThunder", windowprops);
}
function adhocConfirm(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=146,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "adhocConfirm", windowprops);

}

function OpenCancelWindow()
{
  var url="IWFOpenCancelWindow.htm?option=home";
  windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=146,statusbar=no, menubar=no, titlebar=no";
  child=window.open(url, "OpenCancelWindow", windowprops);
  
}
function OpenAdminCancelWindow()
{
  var url="IWFOpenAdminCancelWindow.htm?option=home";
  windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=146,statusbar=no, menubar=no, titlebar=no";
  child=window.open(url, "OpenCancelWindow", windowprops);
  
}
function openStatementWarning()
{
 
  var url="IWFStatementWarning.htm";
  windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=146,statusbar=no, menubar=no, titlebar=no";
  child=window.open(url, "openStatementWarning", windowprops);
  
}


function sendNotice(f)
 {

  window.opener.document.forms[0].action="IWFAddNotice.htm?option=sendNotice&action="+f;
  window.opener.document.forms[0].submit();
  self.close();
  return false;
 }
 
 function openNoticeChildWindow(f)
 {

  var url="IWFOpenNoticeWindow.htm?noticeAction="+f;
  windowprops = "top=150,left=150,resizable=yes,scrollbars=yes,width=700,height=800,statusbar=no, menubar=no, titlebar=no";
  child=window.open(url, "openNoticeChildWindow", windowprops);
  
 }
 function openThunderHeadWindow(f)
 {

  var url="IWFOpenNoticeWindow.htm?noticeAction="+f;
  windowprops = "top=150,left=150,resizable=yes,scrollbars=yes,width=700,height=800,statusbar=no, menubar=no, titlebar=no";
  child=window.open(url, "openNoticeChildWindow", windowprops);
  
 }
 function saveNotice(f)
 {
  window.opener.document.forms[0].action="IWFAddNotice.htm?option=saveNotice&action="+f;
  window.opener.document.forms[0].submit();
  self.close();
 }
 
 function addNotice(f)
 {

  var a=document.forms[0].selOtherFormId.value;
  var b=document.forms[0].selClaimantFormId.value;
  var c=document.forms[0].selEmployerFormId.value;
  document.forms[0].addNoticeType.value=f;
  if(b=="" || a=="" || c=="")
  {
  
   document.forms[0].action="IWFValidateNotice.htm?option=first&noticeType="+f;
   document.forms[0].noticeFlag.value="add";
   document.forms[0].submit();
  }
  else
  {
  var url="IWFAddNotice.htm?option=first&noticeType="+f;
  windowprops = "top=150,left=150,resizable=yes,scrollbars=yes,width=700,height=800,statusbar=no, menubar=no, titlebar=no";
  child=window.open(url, "addNotice", windowprops);
  //
  }
  return false;
 }
 function openThunderHeadNotice(f,g,n)
 {

   document.forms[0].action="IWFAddNotice.htm?option=openThunderHeadNotice&noticeType="+f+"&noticeGuid="+g+"&noticeNumber="+n;
   document.forms[0].submit();
   return false;
 }

/* commented for merging javascript files as it is not used by any domains
function addPenalty(f,a,v,b,p)
{
 var url="IWFOpenAddPenaltyALL.htm?parent="+p+"&action=add&option=addPenalty&penaltyCode="+v+"&bye="+b+"&allowToDate="+a;
 windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=150,statusbar=no, menubar=no, titlebar=no";
child= window.open(url, "addPenalty", windowprops);
 
}*/



function editPenalty(f,a,v,i,b,p){
var url="IWFOpenEditPenaltyALL.htm?parent="+p+"&action=edit&option=editPenalty&penaltyCode="+v+"&index="+i+"&bye="+b+"&allowToDate="+a;
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=150,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "editPenalty", windowprops);
}
 
function addPenaltyAdjudication(f,a,v,b)
{
 var url="IWFOpenAddPenalty.htm?option=addPenalty&action=add&penaltyCode="+v+"&bye="+b+"&allowToDate="+a;
 windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=150,statusbar=no, menubar=no, titlebar=no";
 child=window.open(url, "addPenaltyAdjudication", windowprops);
}

function editPenaltyAdjudication(f,a,v,i,b){
var url="IWFOpenEditPenalty.htm?option=editPenalty&action=edit&penaltyCode="+v+"&index="+i+"&bye="+b+"&allowToDate="+a;
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=150,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "editPenaltyAdjudication", windowprops);
} 

function employer_form(url){

// Determine the popup window properties
// options include:  top, left, toolbars, scrollbars,
// menubar, location, statusbar, and resizable

windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "employer_form", windowprops);
}

function statement(url){

// Determine the popup window properties
// options include:  top, left, toolbars, scrollbars,
// menubar, location, statusbar, and resizable

windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=146,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "statement", windowprops);
}

function openFactFinding(f)
{
var url="IWFFactFinding.htm?option="+f;
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=500,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "openFactFinding", windowprops);
}
function openHelpPDF(f)
{
var url="IWFHelp.htm";
windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=500,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "openHelpPDF", windowprops);
}
function openStatementPopup()
{
  var url="IWFCreateAndResolveIssueStatementWarning.htm";
  windowprops = "top=150,left=150,resizable=no,scrollbars=no,width=700,height=146,statusbar=no, menubar=no, titlebar=no";
  child=window.open(url, "openStatementWarning", windowprops);
}

function searchPopup(url){
windowprops = "top=150,left=150,resizable=no,scrollbars=yes,width=700,height=400,statusbar=no, menubar=no, titlebar=no";
child=window.open(url, "form_search", windowprops);
}




/*********************************************************************************************
End of popup.js
*********************************************************************************************/


/**************************************************
Start of dtree.js
***************************************************/



/*--------------------------------------------------|

| dTree 2.05 | www.destroydrop.com/javascript/tree/ |

|---------------------------------------------------|

| Copyright (c) 2002-2003 Geir Landr�               |

|                                                   |

| This script can be used freely as long as all     |

| copyright messages are intact.                    |

|                                                   |

| Updated: 17.04.2003                               |

|--------------------------------------------------*/

var selectedNodeUrl = 0;


String.prototype.startsWith = function(str) 
{return (this.match("^"+str)==str);}

// Node object

function Node(id, pid, name, url, title, target, icon, iconOpen, open, clickable, rootId) {

	this.id = id;

	this.pid = pid;

	this.name = name;

	this.url = url;

	this.title = title;

	this.target = target;

	this.icon = icon;

	this.iconOpen = iconOpen;

	this._io = open || false;

	this._is = false;

	this._ls = false;

	this._hc = false;

	this._ai = 0;

	this._p;
	
	this.clickable = clickable;
	
	this.rootId = rootId;

};



// Tree object

function dTree(objName, csrf) {
	this.config = {

		target					: null,

		folderLinks			: true,

		useSelection		: true,

		useCookies			: false,

		useLines				: true,

		useIcons				: false,

		useStatusText		: true,

		closeSameLevel	: true,

		inOrder					: false

	}

	//download all images
	var tempImage = new Image();
	tempImage.src= '/static/images/main_bullet_down.gif';

	this.icon = {

		root				: '/static/images/empty.gif',

		folder				: '/static/images/empty.gif',

		folderOpen			: '/static/images/empty.gif',

		node				: '/static/images/empty.gif',

		empty				: '/static/images/empty.gif',

		line				: '/static/images/empty.gif',

		join				: '/static/images/no_child_node.gif',

		joinBottom			: '/static/images/no_child_node.gif',

		plus				: '/static/images/main_bullet.gif',

		plusBottom			: '/static/images/main_bullet.gif',

		minus				: '/static/images/main_bullet_down.gif',

		minusBottom			: '/static/images/main_bullet_down.gif',

		nlPlus				: '/static/images/main_bullet.gif',

		nlMinus				: '/static/images/main_bullet_down.gif'

	};

	this.obj = objName;

	this.aNodes = [];

	this.aIndent = [];

	this.root = new Node(-1);

	this.selectedNode = null;

	this.selectedFound = false;

	this.completed = false;

	if(csrf.length > 0) {
		this.csrfToken = "&" + csrf;
	} else {
		this.csrfToken = csrf;
	}

};



// Adds a new node to the node array

dTree.prototype.add = function(id, pid, name, url, clickable, rootId, title, target, icon, iconOpen, open) {

	this.aNodes[this.aNodes.length] = new Node(id, pid, name, url, title, target, icon, iconOpen, open, clickable, rootId);
};



// Open/close all nodes

dTree.prototype.openAll = function() {

	this.oAll(true);

};

dTree.prototype.closeAll = function() {

	this.oAll(false);

};



// Outputs the tree to the page

dTree.prototype.toString = function() {

	var str = '<div class="dtree">\n';

	if (document.getElementById) {

		if (this.config.useCookies) this.selectedNode = this.getSelected();

		str += this.addNode(this.root);

	} else str += 'Browser not supported.';

	str += '</div>';

	if (!this.selectedFound) this.selectedNode = null;

	this.completed = true;

	return str;

};



// Creates the tree structure

dTree.prototype.addNode = function(pNode) {

	var str = '';

	var n=0;

	if (this.config.inOrder) n = pNode._ai;

	for (n; n<this.aNodes.length; n++) {

		if (this.aNodes[n].pid == pNode.id) {

			var cn = this.aNodes[n];

			cn._p = pNode;

			cn._ai = n;

			this.setCS(cn);

			if (!cn.target && this.config.target) cn.target = this.config.target;

			if (cn._hc && !cn._io && this.config.useCookies) cn._io = this.isOpen(cn.id);

			if (!this.config.folderLinks && cn._hc) cn.url = null;

			if (this.config.useSelection && cn.id == this.selectedNode && !this.selectedFound) {

					cn._is = true;

					this.selectedNode = n;

					this.selectedFound = true;

			}

			str += this.node(cn, n);

			if (cn._ls) break;

		}

	}

	return str;

};



// Creates the node icon, url and text

dTree.prototype.node = function(node, nodeId) {
	var str = '';

	if (this.root.id != node.pid) {
		var nodeClass = 'SubLink_bg';
		
		if (node.pid == 0) {
			nodeClass = 'MainLinksBg';
		}

		var indentCount = 0;

		if (this.root.id != node.pid) {
			indentCount = this.aIndent.length;
		}

		var indentStr = this.indent(node, nodeId);
		str = '<div class="' + nodeClass + '">&nbsp;' + indentStr;
	
		if (this.config.useIcons) {
	
			if (!node.icon) node.icon = (this.root.id == node.pid) ? 
				this.icon.root : ((node._hc) ? this.icon.folder : this.icon.node);
	
			if (!node.iconOpen) node.iconOpen = (node._hc) ? this.icon.folderOpen : this.icon.node;
	
			if (this.root.id == node.pid) {
	
				node.icon = this.icon.root;
	
				node.iconOpen = this.icon.root;
	
			}
	
			str += '<img id="i' + this.obj + nodeId + '" src="' + 
				((node._io) ? node.iconOpen : node.icon) + '" alt="" />';
	
		}
	
		var selectedLink = node.url && this.config.useSelection && (node.url == selectedNodeUrl);
		
		str += "&nbsp;";

		if (selectedLink) {
			str += "<font class='SelectedLink'>" + this.wrapLabel(node.name, indentStr, indentCount, node.pid, true)  + "</font>";
		} else {
			var nodeTextClass = 'SubLink';
			if (node.pid == 0) {
				nodeTextClass = 'MainLinks';
			}
			
			var prefix = "";
			var suffix = "";

			if (!node.clickable) {
				prefix = "<a onclick='javascript:' id='s" + this.obj + nodeId + "' class='" + nodeTextClass + "'>";
				suffix = "</a>";
			} else if (node.url) {
				prefix += '<a id="s' + this.obj + nodeId + '" class="' + nodeTextClass 
				if ('#' == node.url) {
					prefix += '" href="javascript:;"' ;
				} else {
					var separator = "?";
					
					if (node.url.indexOf("?") != -1 ) {
						separator = "&";
					} 

					prefix += '" href="' + node.url + separator + '_mp=' + node.rootId;
					if (node.url.startsWith("http") || node.url.startsWith("HTTP")) {
						//this is an absolute URL
						prefix += "&_ist=y";
					} else {
						prefix += this.csrfToken;
					}

					prefix += '"';
				}
				//((this.config.useSelection) ? (			(node._is ? 'nodeSel' : nodeTextClass)) : nodeTextClass) 

				if (node.title) 
					prefix += ' title="' + node.title + '"';
		
				if (node.target) prefix += ' target="' + node.target + '"';
		
				if (this.config.useStatusText) 
					prefix += ' onmouseover="window.status=\'' + node.name 
						+ '\';return true;" onmouseout="window.status=\'\';return true;" ';
		
				if (this.config.useSelection && ((node._hc && this.config.folderLinks) || !node._hc))
					prefix += ' onclick="javascript: ' + this.obj + '.s(' + nodeId + ');"';
		
				prefix += '>';

				if (node.url || ((!this.config.folderLinks || !node.url) && node._hc)) {
					suffix += '</a>';
				}
			} else if ((!this.config.folderLinks || !node.url) && node._hc && node.pid != this.root.id) {
				prefix += '<a href="javascript: ' + this.obj + '.o(' + nodeId + ');" class="' + nodeTextClass + '">';
				if (node.url || ((!this.config.folderLinks || !node.url) && node._hc)) {
					suffix += '</a>';
				}
			}
			
			str += prefix + this.wrapLabel(node.name, indentStr, indentCount, node.pid) + suffix;
		}	
		
		str += '</div>';
		
	}

	if (node._hc) {

		str += '<div id="d' + this.obj + nodeId + '" class="clip" style="display:' + ((this.root.id == node.pid || node._io) ? 'block' : 'none') + ';">';

		str += this.addNode(node);

		str += '</div>';

	}

	this.aIndent.pop();

	return str;

};

dTree.prototype.wrapLabel = function(title, indentStr, indentCount, pid, selected) {

	if (pid == 0) {
		return title;
	}
	
	var length = 27;
	
	if (selected) {
		length = 24;
	}

	var newTitle = "";
		
	var emptyImageIndent = "";//&nbsp&nbsp;&nbsp;&nbsp;
	
	for (var i = 0 ; i < indentCount; i++) {
		emptyImageIndent += '<img src="' + this.icon.empty + '" alt="" />';
	}
	
	var arrWords = title.split(" ");
	
	if (arrWords.length == 1) {
		newTitle = title;
	} else {
		var line = "";
		var lineLength = length - indentCount * 2;
		
		for (var i = 0; i < arrWords.length; i++) {
			if (line != "") {
				line += " ";
			}
			
			var tempTitle = line + arrWords[i];
			
			if (tempTitle.length > lineLength) {
				newTitle += line;
				line = arrWords[i];
				
				if ( i < arrWords.length) {
					newTitle += "<br/>&nbsp&nbsp;&nbsp;&nbsp" + emptyImageIndent;
				}
			} else {
				line = tempTitle;
			}
		}
		
		newTitle += line;
	}

	return newTitle;
};



// Adds the empty and line icons

dTree.prototype.indent = function(node, nodeId) {

	var str = '';

	if (this.root.id != node.pid) {

		for (var n=0; n<this.aIndent.length; n++)

			str += '<img src="' + ( (this.aIndent[n] == 1 && this.config.useLines) ? this.icon.line : this.icon.empty ) + '" alt="" />';

		(node._ls) ? this.aIndent.push(0) : this.aIndent.push(1);

		if (node._hc && node.clickable) {

			str += '<a href="javascript: ' + this.obj + '.o(' + nodeId + ');"><img id="j' + this.obj + nodeId + '" src="';

			if (!this.config.useLines) str += (node._io) ? this.icon.nlMinus : this.icon.nlPlus;

			else str += ( (node._io) ? 
				((node._ls && this.config.useLines) 
					? this.icon.minusBottom : this.icon.minus) : 
					((node._ls && this.config.useLines) ? this.icon.plusBottom : this.icon.plus ) );

			str += '" alt="" /></a>';

		} else 
			str += '<img src="' + ( (this.config.useLines) ? ((node._ls) ? 
				this.icon.joinBottom : this.icon.join ) : this.icon.empty) + '" alt="" />';
	
	}

	return str;

};



// Checks if a node has any children and if it is the last sibling

dTree.prototype.setCS = function(node) {

	var lastId;

	for (var n=0; n<this.aNodes.length; n++) {

		if (this.aNodes[n].pid == node.id) node._hc = true;

		if (this.aNodes[n].pid == node.pid) lastId = this.aNodes[n].id;

	}

	if (lastId==node.id) node._ls = true;

};



// Returns the selected node

dTree.prototype.getSelected = function() {

	var sn = this.getCookie('cs' + this.obj);

	return (sn) ? sn : null;

};



// Highlights the selected node

dTree.prototype.s = function(id) {
	if (!this.config.useSelection) return;

	var cn = this.aNodes[id];

	if (cn._hc && !this.config.folderLinks) return;

	if (this.selectedNode != id) {

		if (this.selectedNode || this.selectedNode==0) {
			eOld = document.getElementById("s" + this.obj + this.selectedNode);

			if (eOld) {
				var nodeTextClass = 'SubLink';
				
				if (this.aNodes.length > this.selectedNode) {
					var previousNode = this.aNodes[this.selectedNode];
					if (previousNode.pid == 0) {
						nodeTextClass = 'MainLinks';
					}
				}

				eOld.className = nodeTextClass;
			}
		}

		eNew = document.getElementById("s" + this.obj + id);

		if (eNew) {
			eNew.className = "SelectedLink";
		}

		this.selectedNode = id;

		if (this.config.useCookies) this.setCookie('cs' + this.obj, cn.id);
		
	}
	
	if (cn._hc) {
		this.o(id);
	}
};



// Toggle Open or close

dTree.prototype.o = function(id) {
	var cn = this.aNodes[id];

	this.nodeStatus(!cn._io, id, cn._ls);

	cn._io = !cn._io;

	if (this.config.closeSameLevel) this.closeLevel(cn);

	if (this.config.useCookies) this.updateCookie();

};



// Open or close all nodes

dTree.prototype.oAll = function(status) {

	for (var n=0; n<this.aNodes.length; n++) {

		if (this.aNodes[n]._hc && this.aNodes[n].pid != this.root.id) {

			this.nodeStatus(status, n, this.aNodes[n]._ls)

			this.aNodes[n]._io = status;

		}

	}

	if (this.config.useCookies) this.updateCookie();

};



// Opens the tree to a specific node

dTree.prototype.openToByUrl = function(nUrl, bSelect, nRootId) {
	
	for (var n=0; n<this.aNodes.length; n++) {
		if (this.aNodes[n].url != null 
			&& this.aNodes[n].url.indexOf(nUrl) == 0 
			&& (nRootId == null || this.aNodes[n].rootId == nRootId)) {
			
			this.openTo(this.aNodes[n].id, bSelect);
			break;
		}
	}
}

// Opens the tree to a specific node

dTree.prototype.openTo = function(nId, bSelect, bFirst) {

	if (!bFirst) {

		for (var n=0; n<this.aNodes.length; n++) {

			if (this.aNodes[n].id == nId) {

				nId=n;

				break;

			}

		}

	}

	var cn=this.aNodes[nId];

	if (cn.pid==this.root.id || !cn._p) return;

	cn._io = bFirst;

	cn._is = bSelect;

	if (this.completed && cn._hc) this.nodeStatus(bFirst, cn._ai, cn._ls);

	if (this.completed && bSelect) this.s(cn._ai);

	else if (bSelect) this._sn=cn._ai;

	this.openTo(cn._p._ai, false, true);

};



// Closes all nodes on the same level as certain node

dTree.prototype.closeLevel = function(node) {

	for (var n=0; n<this.aNodes.length; n++) {

		if (this.aNodes[n].pid == node.pid && this.aNodes[n].id != node.id && this.aNodes[n]._hc) {

			this.nodeStatus(false, n, this.aNodes[n]._ls);

			this.aNodes[n]._io = false;

			this.closeAllChildren(this.aNodes[n]);

		}

	}

}



// Closes all children of a node

dTree.prototype.closeAllChildren = function(node) {

	for (var n=0; n<this.aNodes.length; n++) {

		if (this.aNodes[n].pid == node.id && this.aNodes[n]._hc) {

			if (this.aNodes[n]._io) this.nodeStatus(false, n, this.aNodes[n]._ls);

			this.aNodes[n]._io = false;

			this.closeAllChildren(this.aNodes[n]);		

		}

	}

}



// Change the status of a node(open or closed)

dTree.prototype.nodeStatus = function(status, id, bottom) {

	eDiv	= document.getElementById('d' + this.obj + id);

	eJoin	= document.getElementById('j' + this.obj + id);

	if (this.config.useIcons) {

		eIcon	= document.getElementById('i' + this.obj + id);

		eIcon.src = (status) ? this.aNodes[id].iconOpen : this.aNodes[id].icon;

	}

	if (eJoin) {
		eJoin.src = (this.config.useLines)?
	
		((status)?((bottom)?this.icon.minusBottom:this.icon.minus):((bottom)?this.icon.plusBottom:this.icon.plus)):
	
		((status)?this.icon.nlMinus:this.icon.nlPlus);
	}

	if (eDiv) {
		eDiv.style.display = (status) ? 'block': 'none';
	}

};





// [Cookie] Clears a cookie

dTree.prototype.clearCookie = function() {

	var now = new Date();

	var yesterday = new Date(now.getTime() - 1000 * 60 * 60 * 24);

	this.setCookie('co'+this.obj, 'cookieValue', yesterday);

	this.setCookie('cs'+this.obj, 'cookieValue', yesterday);

};



// [Cookie] Sets value in a cookie

dTree.prototype.setCookie = function(cookieName, cookieValue, expires, path, domain, secure) {

	document.cookie =

		escape(cookieName) + '=' + escape(cookieValue)

		+ (expires ? '; expires=' + expires.toGMTString() : '')

		+ (path ? '; path=' + path : '')

		+ (domain ? '; domain=' + domain : '')

		+ (secure ? '; secure' : '');

};



// [Cookie] Gets a value from a cookie

dTree.prototype.getCookie = function(cookieName) {

	var cookieValue = '';

	var posName = document.cookie.indexOf(escape(cookieName) + '=');

	if (posName != -1) {

		var posValue = posName + (escape(cookieName) + '=').length;

		var endPos = document.cookie.indexOf(';', posValue);

		if (endPos != -1) cookieValue = unescape(document.cookie.substring(posValue, endPos));

		else cookieValue = unescape(document.cookie.substring(posValue));

	}

	return (cookieValue);

};



// [Cookie] Returns ids of open nodes as a string

dTree.prototype.updateCookie = function() {

	var str = '';

	for (var n=0; n<this.aNodes.length; n++) {

		if (this.aNodes[n]._io && this.aNodes[n].pid != this.root.id) {

			if (str) str += '.';

			str += this.aNodes[n].id;

		}

	}

	this.setCookie('co' + this.obj, str);

};



// [Cookie] Checks if a node id is in a cookie

dTree.prototype.isOpen = function(id) {

	var aOpen = this.getCookie('co' + this.obj).split('.');

	for (var n=0; n<aOpen.length; n++)

		if (aOpen[n] == id) return true;

	return false;

};



// If Push and pop is not implemented by the browser

if (!Array.prototype.push) {

	Array.prototype.push = function array_push() {

		for(var i=0;i<arguments.length;i++)

			this[this.length]=arguments[i];

		return this.length;

	}

};

if (!Array.prototype.pop) {

	Array.prototype.pop = function array_pop() {

		lastElement = this[this.length-1];

		this.length = Math.max(this.length-1,0);

		return lastElement;

	}

};



/***********************************************************
End of dtree.js
***********************************************************/

/**********************************************************
Start of RoboHelp_CSH.js
**********************************************************/
// Adobe
// Copyright� 1998-2008 Adobe Systems Incorporated. All rights reserved.
// RoboHelp_CSH.js
// The Helper function for WebHelp Context Sensitive Help

//     Syntax:
//     function RH_ShowHelp(hParent, a_pszHelpFile, uCommand, dwData)
//
//     hParent
//          Reserved - Use 0
//   
//     pszHelpFile
//          WebHelp: 
//               Path to help system start page ("http://www.myurl.com/help/help.htm" or "/help/help.htm")
//               For custom windows (defined in Help project), add ">" followed by the window name ("/help/help.htm>mywin")
//
//          WebHelp Enterprise: 
//               Path to RoboEngine server ("http://RoboEngine/roboapi.asp")
//               If automatic merging is turned off in RoboEngine Configuration Manager, specify the project name in the URL ("http://RoboEngine/roboapi.asp?project=myproject")
//               For custom windows (defined in Help project), add ">" followed by the window name ("http://RoboEngine/roboapi.asp>mywindow")
//
//     uCommand
//          Command to display help. One of the following:
//                    HH_HELP_CONTEXT     // Displays the topic associated with the Map ID sent in dwData
//											if 0, then default topic is displayed.				
//               The following display the default topic and the Search, Index, or TOC pane. 
//               Note: The pane displayed in WebHelp Enterprise will always be the window's default pane.
//                    HH_DISPLAY_SEARCH 
//                    HH_DISPLAY_INDEX
//                    HH_DISPLAY_TOC
//
//     dwData
//          Map ID associated with the topic to open (if using HH_HELP_CONTEXT), otherwise 0
//
//     Examples:
//     <p>Click for <A HREF='javascript:RH_ShowHelp(0, "help/help.htm", 0, 10)'>Help</A> (map number 10)</p>
//     <p>Click for <A HREF='javascript:RH_ShowHelp(0, "help/help.htm>mywindow", 0, 100)'>Help in custom window (map number 100)</A></p>


var gbNav6=false;
var gbIE5=false;

var gAgent=navigator.userAgent.toLowerCase();
var gbMac=(gAgent.indexOf("mac")!=-1);
var gbSunOS=(gAgent.indexOf("sunos")!=-1);
var gbOpera=(gAgent.indexOf("opera")!=-1);

var HH_DISPLAY_TOPIC = 0;
var HH_DISPLAY_TOC = 1;
var HH_DISPLAY_INDEX = 2;
var HH_DISPLAY_SEARCH = 3;
var HH_HELP_CONTEXT = 15;

var gVersion=navigator.appVersion.toLowerCase();

var gnVerMajor=parseInt(gVersion);
var gnVerMinor=parseFloat(gVersion);

if(navigator.appName.indexOf("Microsoft")!=-1)
{
	var nPos=gAgent.indexOf("msie");
	if(nPos!=-1)
	{
		var nVersion=parseFloat(gAgent.substring(nPos+5));
		if(nVersion>=5)
			gbIE5=true;
	}
}

if(gnVerMajor>=4)
{
	if(navigator.appName=="Netscape")
	{
		if(gnVerMajor>=5)
			gbNav6=true;
	}
}

function RH_ShowHelp(hParent, a_pszHelpFile, uCommand, dwData)
{
	// this function only support WebHelp
	var strHelpPath = a_pszHelpFile;
	var strWnd = "";
	var nPos = a_pszHelpFile.indexOf(">");
	if (nPos != -1)
	{
		strHelpPath = a_pszHelpFile.substring(0, nPos);
		strWnd = a_pszHelpFile.substring(nPos+1); 
	}
	if (isServerBased(strHelpPath))
		RH_ShowWebHelp_Server(hParent, strHelpPath, strWnd, uCommand, dwData);
	else
		RH_ShowWebHelp(hParent, strHelpPath, strWnd, uCommand, dwData);
}

function RH_OpenHelpTopic(a_pszHelpMainPage, a_pszRelTopicUrl)
{
	// this function only support WebHelp
	var strHelpPath = a_pszHelpMainPage;
	var strWnd = "";
	var nPos = a_pszHelpMainPage.indexOf(">");
	if (nPos != -1)
	{
		strHelpPath = a_pszHelpMainPage.substring(0, nPos);
		strWnd = a_pszHelpMainPage.substring(nPos+1); 
	}

	var a_pszHelpFile = "";
	a_pszHelpFile = strHelpPath + "#<url=" + a_pszRelTopicUrl;
	if (strWnd)
		a_pszHelpFile += ">>wnd=" + strWnd;

	if (a_pszHelpFile)
	{
		if (gbIE5 || gbNav6)
			loadData(a_pszHelpFile);
		else
		{
			var sParam = "left="+screen.width+",top="+screen.height+",width=100,height=100";
			window.open(a_pszHelpFile, "__webCshStub", sParam);
		}
	}
	
}


function RH_ShowWebHelp_Server(hParent, strHelpPath, strWnd, uCommand, dwData)
{
	// hParent never used.
	ShowWebHelp_Server(strHelpPath, strWnd, uCommand, dwData);
}

function RH_ShowWebHelp(hParent, strHelpPath, strWnd, uCommand, dwData)
{
	// hParent never used.
	ShowWebHelp(strHelpPath, strWnd, uCommand, dwData);
}


function ShowWebHelp_Server(strHelpPath, strWnd, uCommand, nMapId)
{
	var a_pszHelpFile = "";
	if (uCommand == HH_HELP_CONTEXT)
	{
		if (strHelpPath.indexOf("?") == -1)
			a_pszHelpFile = strHelpPath + "?ctxid=" + nMapId;
		else
			a_pszHelpFile = strHelpPath + "&ctxid=" + nMapId;
	}
	else
	{
		if (strHelpPath.indexOf("?") == -1)
			a_pszHelpFile = strHelpPath + "?ctxid=0";
		else
			a_pszHelpFile = strHelpPath + "&ctxid=0";
	}

	if (strWnd)
		a_pszHelpFile += ">" + strWnd;

	if (gbIE5 || gbNav6)
	{
		a_pszHelpFile += "&cmd=newwnd&rtype=iefrm";
		loadData(a_pszHelpFile);
	}
	else
	{
		var sParam = "left="+screen.width+",top="+screen.height+",width=100,height=100";
		window.open(a_pszHelpFile, "__webCshStub", sParam);
	}
}


function ShowWebHelp(strHelpPath, strWnd, uCommand, nMapId)
{
	var a_pszHelpFile = "";
	if (uCommand == HH_DISPLAY_TOPIC)
	{
		a_pszHelpFile = strHelpPath + "#<id=0";
	}
	if (uCommand == HH_HELP_CONTEXT)
	{
		a_pszHelpFile = strHelpPath + "#<id=" + nMapId;
	}
	else if (uCommand == HH_DISPLAY_INDEX)
	{
		a_pszHelpFile = strHelpPath + "#<cmd=idx";
	}
	else if (uCommand == HH_DISPLAY_SEARCH)
	{
		a_pszHelpFile = strHelpPath + "#<cmd=fts";
	}
	else if (uCommand == HH_DISPLAY_TOC)
	{
		a_pszHelpFile = strHelpPath + "#<cmd=toc";
	}
	if (strWnd)
		a_pszHelpFile += ">>wnd=" + strWnd;

	if (a_pszHelpFile)
	{
		if (gbIE5 || gbNav6) {
			loadData(a_pszHelpFile);
		} else {
			var sParam = "left="+screen.width+",top="+screen.height+",width=100,height=100";
			window.open(a_pszHelpFile, "__webCshStub", sParam);
		}
	}
}

function isServerBased(a_pszHelpFile)
{
	if (a_pszHelpFile.length > 0)
	{
		var nPos = a_pszHelpFile.lastIndexOf('.');
		if (nPos != -1 && a_pszHelpFile.length >= nPos + 4)
		{
			var sExt = a_pszHelpFile.substring(nPos, nPos + 4);
			if (sExt.toLowerCase() == ".htm")
			{
				return false;
			}
		}
	}
	return true;
}

function getElement(sID)
{
	if(document.getElementById)
		return document.getElementById(sID);
	else if(document.all)
		return document.all(sID);
	return null;
}

function loadData(sFileName)
{
	if(!getElement("dataDiv"))
	{
		if(!insertDataDiv())
		{
			gsFileName=sFileName;
			return;
		}
	}
	var sHTML="";
	if(gbMac)
		sHTML+="<iframe name=\"__WebHelpCshStub\" src=\""+sFileName+"\"></iframe>";
	else
		sHTML+="<iframe name=\"__WebHelpCshStub\" style=\"visibility:hidden;width:0;height:0\" src=\""+sFileName+"\"></iframe>";
	
	var oDivCon=getElement("dataDiv");

	if(oDivCon)
	{
		if(gbNav6)
		{
			if(oDivCon.getElementsByTagName&&oDivCon.getElementsByTagName("iFrame").length>0)
			{
				oDivCon.getElementsByTagName("iFrame")[0].src=sFileName;
			}
			else
				oDivCon.innerHTML=sHTML;
		}
		else {
			oDivCon.innerHTML=sHTML;
		}
	}
}

function insertDataDiv()
{
	var sHTML="";
	if(gbMac)
		sHTML+="<div id=dataDiv style=\"display:none;\"></div>";
	else
		sHTML+="<div id=dataDiv style=\"visibility:hidden\"></div>";

	var obj = document.body;
	if (gbIE5)
	{
		obj.insertAdjacentHTML("beforeEnd", sHTML);
	}
	else if (gbNav6)
	{
		var r = obj.ownerDocument.createRange();
		r.setStartBefore(obj);
		var	parsedHTML = r.createContextualFragment(sHTML);
		obj.appendChild(parsedHTML);
	}
	return true;
}



/**********************************************************
End of RoboHelp_CSH.js
**********************************************************/

/*********************************************************
Start of iwf.js
*********************************************************/
function keep_child_on_top ()

{

      if (child != null)

            if (child . closed)

                  child = null;

            else

                  child . focus ();

}

/* Auto Tab Function! */
/*<!-- Begin
var isNN = (navigator.appName.indexOf("Netscape")!=-1);
function autoTab(input,len, e) {
var keyCode = (isNN) ? e.which : e.keyCode;
var filter = (isNN) ? [0,8,9] : [0,8,9,16,17,18,37,38,39,40,46];
if(input.value.length >= len && !containsElement(filter,keyCode)) {
input.value = input.value.slice(0, len);
input.form[(getIndex(input)+1) % input.form.length].focus();
}
function containsElement(arr, ele) {
var found = false, index = 0;
while(!found && index < arr.length)
if(arr[index] == ele)
found = true;
else
index++;
return found;
}
function getIndex(input) {
var index = -1, i = 0, found = false;
while (i < input.form.length && index == -1)
if (input.form[i] == input)index = i;
else i++;
return index;
}
return true;
}
//  End -->
*/

/* Auto Focus on First Field */
/*<!-- Begin
function placeFocus() {
if (document.forms.length > 0) {
var field = document.forms[0];
for (i = 0; i < field.length; i++) {
if ((field.elements[i].type == "text") || (field.elements[i].type == "textarea") || (field.elements[i].type.toString().charAt(0) == "s")) {
document.forms[0].elements[i].focus();
break;
         }
      }
   }
}

//  End -->
*/
 
/**********************************************************
End of iwf.js
**********************************************************/




